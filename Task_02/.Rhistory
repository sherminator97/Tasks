install.packages ("swirl")
library (swirl)
q()
library (swirl)
swirl ()
print
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 1000)
z * 2 + 1000
my_div
q()
library (swirl)
swirl ()
getwd()
1s ()
1s()
ls()
x <- 9
ls()
list.files
list.files()
?list.files
args()
args()args(list.files)
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create()
getwd(dir.create(testdir))
getwd(testdir)
getwd(dir.create)
getwd(dir.create)(testdir)
getwd(dir.create("testdir")
getwd(dir.create("testdir")
getwd(dir.create("testdir")
getwd(dir.create("testdir")
args(dir.create)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files("testdir")
list.files("mytest.R")
list.files(mytest.R)
list.files()
list.files("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R" "to" "mytest2.R")
file.rename("mytest.R" args("mytest2.R"))
file.rename("mytest.R") to "mytest2.R"
file.rename( from = "mytest.R", to = "mytest2.R")
file.copy( from = "mytest2.R", to = "mytest3.R")
file.path ("mytest3.R")
args(from = folder1, folder 2, to = file.path)
args(from = folder1 and folder 2, to = file.path)
args(from = 'folder1' 'folder 2', to = file.path)
args(from = folder1 folder 2, to = file.path)
args(folder1,folder2)
args(folder1,)args(folder2)
info()
args(folder1)
args(folder1)
args(folder1)
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3")
dir.create(file.path("testdir2", "testdir3")
dir.create(file.path("testdir2", "testdir3") recursive = TRUE
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
dir.create(file.path(testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
dir.create(file.path("testdir2", "testdir3")), recursive = TRUE
dir.create(file.path('testdir2', 'testdir3')), recursive = TRUE
dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
dir.create(file.path("testdir2" , "testdir3") , recursive = TRUE
dir.create(file.path("testdir2" , "testdir3") , recursive = TRUE
"dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?:
?":"
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5, 10, length=30)
length()
length(30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2) each = 10)
rep(c(0, 1, 2), each = 10)
q()
library (swirl)
swirl ()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x(3, 5, 7))
c(3, 5, 7)
c[(3, 5, 7)]
[c(3, 5, 7)]
[c(3, 5, 7),]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20 dim(c(4,5))
my_matrix <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
my_matrix <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
y_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE,dimnames = NULL)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20,nrow = 4,ncol = 5)
my_matrix2 <- matrix(1:20,nrow = 4,ncol = 5, byrow = FALSE)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
my_matrix2 <-matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE,dimnames = NULL)
my_matrix2 <-matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE,dimnames = NULL)
my_matrix2 <-matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
?matrix
my_matrix2 <- matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
identical( my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(data.frame(patients, my_matrix))
class(data.frame)
class(data.frame(data.frame))
class(my_data)
cnames("patient", "age", "weight", "bp", "rating", "test")
cnames <-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
6!=7
5!=7
5!=7
5!==7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical ("twins", "Twins")
identical ("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample (10)
ints
ints > 5
which(ints < 7)
which(ints > 7)
any (ints)
any (ints < 0)
all(ints < 0)
all(ints > 0)
q()
library (swirl)
swirl ()
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
submit()
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate( c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x+1},c(8, 4, 0))
evaluate(function(x){x+[1]},c(8, 4, 0))
evaluate(function(x){x[1]},c(8, 4, 0))
valuate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram(c( "Hello", "good", "morning", "!"))
submit()
mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
mad_libs(place = "America", adjective = "gorgeous", noun = "flag")
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot()
plot(x = speed, y = cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
setwd("C:\\Users\\Sherm\\Desktop\\Evolution\\Tasks\\Task_02")
beren3 <- read.csv("beren_new.csv")
beren3
Feeds <- beren3[which(beren3$event == "bottle"),]
avgMilk <- mean(beren3$value[Feeds])
head(beren3)
head(Feeds)
# Read in the data
beren3 <- read.csv("beren_new.csv")
Feeds <- which(beren3$event == "bottle")
# Summarize the data
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
# Correlation test on the data
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenCor
berenANOVA <- (beren3$value[Feeds] ~ beren3$caregiver[Feeds])
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
berenANOVA
summary(berenANOVA)
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)")
?par
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(TotalFeed), lty=2, col="red")
abline(h=mean(totalFeed), lty=2, col="red")
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty =2, col="red")
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
pdf("r02b-cumulativeMilkByTime.pdf")
source("http://jonsmitchell.com/code/plotFxn02b.R")
dev.off()
q()
q()
timestart <- beren4$start_hour + beren4$start_minute/60
timeend <- beren4$end_hour + beren4$end_minute/60
setwd("C:\\Users\\Sherm\\Desktop\\Evolution\\Tasks\\Task_02")
beren3 <- read.csv("beren_new.csv")
naps <- which(beren3$event == "nap")
beren4 <- beren3[naps,]
timestart <- beren4$start_hour + beren4$start_minute/60
timeend <- beren4$end_hour + beren4$end_minute/60
duration <- timeend - timestart
totaltime <- tapply(beren4$day[naps], beren4$age[naps])
totaltime <- tapply(beren4$day[naps], beren4$age[naps], sum)
?par
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totaltime)), totaltime, type="b", pch=16, xlab="day", ylab="totaltime")
setwd("C:\\Users\\Sherm\\Desktop\\Evolution\\Tasks\\Task_02")
# Read in the data
#new object
naps <- which(beren3$event == "nap")
beren4 <- beren3[naps,]
head(beren4)
#times for each nap
timestart <- beren4$start_hour + beren4$start_minute/60
timeend <- beren4$end_hour + beren4$end_minute/60
totaltime <- tapply(beren4$day[naps], beren4$age[naps], sum)
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totaltime)), totaltime, type="b", pch=16, xlab="day", ylab="totaltime")
beren4$duration
cor.test(beren4$age, duration)
#my specific prediction is that Beren ate a total amount of 4 solid foods next Tuesday
beren <- read.csv("beren_new.csv", stringsAsFactors = FALSE)
head(beren)
Feeds <- which(beren$event == "solids")
totalFeeds <- beren[Feeds,]
head(totalFeeds)
model <- lm(totalFeed ~ as.numeric(names(totalFeed)))
model$coefficients
300 * model$coefficients[2] + model$coefficients[1]
predict(model, newdata=data.frame(age=300))
300 * model$coefficients[2] + model$coefficients[1]
