axisPhylo()
#Question 6. The reason why is because the tips refer to the different chromosome sets from the five individuals.
#find age of the most recent ancestor for this SNP on this locus for these individuals
Age1 <- max(nodeHeights(t1))
head(Age1)
#look at first SNP of the second locus
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
#age of most recent common ancestor for second SNP. The second SNP is present compared to the first SNP.
Age2 <- max(nodeHeights(t2))
head(Age2)
#Question 7.No, the first and second SNP do not match.
par(mfrow=c(1,3))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#make more comparisons
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
#study opportunity, change model
model2 <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) + feat_mutation(5) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
#run simulation 2
stats <- simulate(model2, nsim = 1)
#Diversity 2
Diversity <- stats$pi
head(Diversity)
#Each SNP in each locus has its own ancestry tree
Nloci <- length(stats$trees)
#look at the first SNP for the first locus
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
#find age of the most recent ancestor for this SNP on this locus for these individuals
Age1 <- max(nodeHeights(t1))
head(Age1)
#look at first SNP of the second locus
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
#plot t1 and t2
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#make more comparisons
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
#plot t1 and t2
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#study opportunity, change model
model2 <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) + feat_mutation(5) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
#run simulation 2
stats <- simulate(model2, nsim = 1)
#Diversity 2
Diversity <- stats$pi
head(Diversity)
#Each SNP in each locus has its own ancestry tree
Nloci <- length(stats$trees)
#look at the first SNP for the first locus
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
#find age of the most recent ancestor for this SNP on this locus for these individuals
Age1 <- max(nodeHeights(t1))
head(Age1)
#look at first SNP of the second locus
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
#age of most recent common ancestor for second SNP. The second SNP is present compared to the first SNP.
Age2 <- max(nodeHeights(t2))
head(Age2)
#plot t1 and t2
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#set up model
model <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2)+ feat_mutation(10) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
#run simulation
stats <- simulate(model, nsim = 1)
#measure of genetic diversity
Diversity <- stats$pi
#Looking at diversity all the numbers are not the same. These differences could be due to genetic drift.
head(Diversity)
#Each SNP in each locus has its own ancestry tree
Nloci <- length(stats$trees)
#look at the first SNP for the first locus
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
#find age of the most recent ancestor for this SNP on this locus for these individuals
Age1 <- max(nodeHeights(t1))
head(Age1)
#look at first SNP of the second locus
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
#age of most recent common ancestor for second SNP. The second SNP is present compared to the first SNP.
Age2 <- max(nodeHeights(t2))
head(Age2)
#Question 7.No, the first and second SNP do not match.
par(mfrow=c(1,3))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#study opportunity, change model
model2 <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) + feat_mutation(5) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
#run simulation 2
stats <- simulate(model2, nsim = 1)
#Diversity 2
Diversity <- stats$pi
head(Diversity)
#Each SNP in each locus has its own ancestry tree
Nloci <- length(stats$trees)
#look at the first SNP for the first locus
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
#find age of the most recent ancestor for this SNP on this locus for these individuals
Age1 <- max(nodeHeights(t1))
head(Age1)
#look at first SNP of the second locus
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
#age of most recent common ancestor for second SNP. The second SNP is present compared to the first SNP.
Age2 <- max(nodeHeights(t2))
head(Age2)
#plot t1 and t2
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#make more comparisons
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
#compare all of the SNPs from all of the loci all at once
for (locus in 1:Nloci) {
ntrees <- length(stats$trees[[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree(text=stats$trees[[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
}
}
#plot trees all at once
par(mfrow=c(1,1))
densityTree(outPhy)
model <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2)+ feat_mutation(10) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
#run simulation
stats <- simulate(model, nsim = 1)
#measure of genetic diversity
Diversity <- stats$pi
#study opportunity, change model
model2 <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) + feat_mutation(5) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
#run simulation 2
stats <- simulate(model2, nsim = 1)
#Diversity 2
Diversity2 <- stats$pi
Diversity
Diversity2
boxplot(Diversity, DDiversity)
boxplot(Diversity, Diversity2)
#look at the first SNP for the first locus
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
#find age of the most recent ancestor for this SNP on this locus for these individuals
Age1 <- max(nodeHeights(t1))
head(Age1)
#look at first SNP of the second locus
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#make more comparisons
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
#mutation rate varies in each of 40 simulations
model3 <- coal_model(10, 50) + feat_mutation(par_prior("theta", sample.int(100, 1))) + sumstat_nucleotide_div()
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
?coalescent.plot()
?coala
?`coala-package`
?coal_model
model4 <- coal_model(c(15, 19), 5) + feat_migration(0.5, symmetric = TRUE) + sumstat_trees()
check_model (model)
simulate(model)
model4 <- coal_model(c(15, 19), 5) + feat_migration(5) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
check_model (model4)
simulate(model4)
model4 <- coal_model(c(15, 19), 5) + feat_migration(5, symmetric = TRUE) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
library("learnPopGen")
library("coala")
library("phytools")
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, symmetric = TRUE) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
?feat_migration
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, symmetric = FALSE) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from=1, pop_to = 2, symmetric = FALSE) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
#savecoalescentplot 3
pdf("largecoalescentplot.pdf", height = 4, width = 4)
setwd("C:\\Users\\Sherm\\Desktop\\Evolution\\Tasks\\Task_06")
library("learnPopGen")
library("coala")
library("phytools")
#savecoalescentplot2
pdf("r06-mediumcoalescentplot.pdf", height = 4, width = 4)
coalescent.plot(n=20, ngen=30, col.order="alternating")
dev.off()
#savecoalescentplot 3
pdf("r06-largecoalescentplot.pdf", height = 4, width = 4)
coalescent.plot(n=50, ngen=40, col.order="alternating")
dev.off()
?sumstat_sfs()
?coal_model()
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
check_model (model4)
simulate(model4)
library("learnPopGen")
library("coala")
library("phytools")
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
check_model (model4)
simulate(model4)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
check_model (model4)
simulate(model4
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
check_model (model4)
simulate(model4)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time, start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time, start = FALSE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time = par_named("tau") start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time = par_named("tau") start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all")) +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time = par_named("tau"), start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all")) +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time = par_named("tau"), start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time = par_named("tau"), start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
check_model (model4)
simulate(model4)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time = par_cost(5), start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time = par_const(5), start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
check_model (model4)
simulate(model4)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 0, strength_Aa = 0, strength_aa = 0, strength_A = NULL, population = "all", time = par_expr(5), start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
check_model (model4)
simulate(model4)
model4 <- coal_model(c(15, 19), 5) +
feat_migration(5, pop_from = 1, pop_to = 2, symmetric = FALSE, time = 0.5) + feat_mutation(10) +
feat_recombination(10) +
feat_selection(strength_AA = 4, strength_Aa = 2, strength_aa = 6, strength_A = NULL, population = "all", time = par_expr(5), start = TRUE, start_frequency = 5e-04, Ne = 10000, position = 0.5, force_keep = TRUE, locus_group = "all") +
sumstat_nucleotide_div(name = "pi", population = 2, transformation = identity)
check_model (model4)
simulate(model4)
setwd("C:\\Users\\Sherm\\Desktop\\Evolution\\Tasks\\Task_06")
library("learnPopGen")
library("coala")
library("phytools")
#set up model
model <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2)+ feat_mutation(10) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
#run simulation
stats <- simulate(model, nsim = 1)
#measure of genetic diversity
Diversity <- stats$pi
#Looking at diversity all the numbers are not the same. These differences could be due to genetic drift.
head(Diversity)
#Each SNP in each locus has its own ancestry tree
Nloci <- length(stats$trees)
#look at the first SNP for the first locus
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
#find age of the most recent ancestor for this SNP on this locus for these individuals
Age1 <- max(nodeHeights(t1))
head(Age1)
#look at first SNP of the second locus
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
#age of most recent common ancestor for second SNP. The second SNP is present compared to the first SNP.
Age2 <- max(nodeHeights(t2))
head(Age2)
#Question 7.No, the first and second SNP do not match.
par(mfrow=c(1,3))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#make more comparisons
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
#compare all of the SNPs from all of the loci all at once
for (locus in 1:Nloci) {
ntrees <- length(stats$trees[[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree(text=stats$trees[[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
}
}
#plot trees all at once
par(mfrow=c(1,1))
densityTree(outPhy)
#study opportunity, change model
model2 <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) + feat_mutation(5) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
#run simulation 2
stats <- simulate(model2, nsim = 1)
#Diversity 2
Diversity2 <- stats$pi
head(Diversity)
#Each SNP in each locus has its own ancestry tree
Nloci <- length(stats$trees)
#look at the first SNP for the first locus
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
#find age of the most recent ancestor for this SNP on this locus for these individuals
Age1 <- max(nodeHeights(t1))
head(Age1)
#look at first SNP of the second locus
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
#age of most recent common ancestor for second SNP. The second SNP is present compared to the first SNP.
Age2 <- max(nodeHeights(t2))
head(Age2)
#Question 7.No, the first and second SNP do not match.
par(mfrow=c(1,3))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
#compare the trees
compare.chronograms(t1, t2)
#make more comparisons
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
#compare all of the SNPs from all of the loci all at once
for (locus in 1:Nloci) {
ntrees <- length(stats$trees[[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree(text=stats$trees[[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
}
}
#plot trees all at once
par(mfrow=c(1,1))
densityTree(outPhy)
#mutation rate varies in each of 40 simulations
model3 <- coal_model(10, 50) + feat_mutation(par_prior("theta", sample.int(100, 1))) + sumstat_nucleotide_div()
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
#plot mean_pi against theta with regression line
Line <- lm(mean_pi ~ theta)
plot(mean_pi, theta)
abline(Line)
#plot mean_pi against theta with regression line
Line <- lm(mean_pi ~ theta)
plot(mean_pi, theta)
abline(Line)
#mutation rate varies in each of 40 simulations
model3 <- coal_model(10, 50) + feat_mutation(par_prior("theta", sample.int(100, 1))) + sumstat_nucleotide_div()
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
#plot mean_pi against theta with regression line
Line <- lm(mean_pi ~ theta)
plot(mean_pi, theta)
abline(Line)
#mutation rate varies in each of 40 simulations
model3 <- coal_model(10, 50) + feat_mutation(par_prior("theta", sample.int(100, 1))) + sumstat_nucleotide_div()
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
#plot mean_pi against theta with regression line
Line <- lm(mean_pi ~ theta)
plot(mean_pi, theta)
abline(Line)
library("learnPopGen")
library("coala")
library("phytools")
#mutation rate varies in each of 40 simulations
model3 <- coal_model(10, 50) + feat_mutation(par_prior("theta", sample.int(100, 1))) + sumstat_nucleotide_div()
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
#plot mean_pi against theta with regression line
Line <- lm(mean_pi ~ theta)
plot(mean_pi, theta)
abline(Line)
