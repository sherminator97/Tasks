
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library (swirl)

| Hi! I see that you have some variables saved in your workspace. To keep
| things running smoothly, I recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type
| rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swirl ()

| Welcome to swirl! Please sign in. If you've been here before, use the same
| name as you did then. If you are new, call yourself something unique.

What shall I call you? Sherwin Miller

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 2

  |                                                                              |                                                                      |   0%

| In this lesson, you'll learn how to examine your local workspace in R and
| begin to explore the relationship between your workspace and the file system
| of your machine.

...

  |                                                                              |==                                                                    |   3%
| Because different operating systems have different conventions with regards
| to things like file paths, the outputs of these commands may vary across
| machines.

...

  |                                                                              |====                                                                  |   5%
| However it's important to note that R provides a common API (a common set of
| commands) for interacting with files, that way your code will work across
| different kinds of computers.

...

  |                                                                              |=====                                                                 |   8%
| Let's jump right in so you can get a feel for how these special functions
| work!

...

  |                                                                              |=======                                                               |  10%
| Determine which directory your R session is using as its current working
| directory using getwd().

> getwd()
[1] "C:/Users/Sherm/Documents"

| Nice work!

  |                                                                              |=========                                                             |  13%
| List all the objects in your local workspace using ls().

> 1s ()
Error: unexpected symbol in "1s"
> 1s()
Error: unexpected symbol in "1s"
> ls()
[1] "my_div"  "my_sqrt" "x"       "y"       "z"      

| That's a job well done!

  |                                                                              |===========                                                           |  15%
| Some R commands are the same as their equivalents commands on Linux or on a
| Mac. Both Linux and Mac operating systems are based on an operating system
| called Unix. It's always a good idea to learn more about Unix!

...

  |                                                                              |=============                                                         |  18%
| Assign 9 to x using x <- 9.

> x <- 9

| You are quite good my friend!

  |                                                                              |==============                                                        |  21%
| Now take a look at objects that are in your workspace using ls().

> ls()
[1] "my_div"  "my_sqrt" "x"       "y"       "z"      

| Keep up the great work!

  |                                                                              |================                                                      |  23%
| List all the files in your working directory using list.files() or dir().

> list.files
function (path = ".", pattern = NULL, all.files = FALSE, 
    full.names = FALSE, recursive = FALSE, ignore.case = FALSE, 
    include.dirs = FALSE, no.. = FALSE) 
.Internal(list.files(path, pattern, all.files, full.names, recursive, 
    ignore.case, include.dirs, no..))
<bytecode: 0x000000001661a418>
<environment: namespace:base>

| Not exactly. Give it another go. Or, type info() for more options.

| Type list.files() to all the files in your working directory.

> list.files()
 [1] "2017PTKPDMembersSubmitted.xlsx"                    
 [2] "6-Membrane%20Structure (1).pptx"                   
 [3] "Bioinformatics question 3 DNA sequence.docx"       
 [4] "capstone presentation 1 article choices.docx"      
 [5] "Cultural Anthropolgy Discussion question 4.docx"   
 [6] "Custom Office Templates"                           
 [7] "desktop.ini"                                       
 [8] "Embryology lecture 2.docx"                         
 [9] "embryology lecture 6.docx"                         
[10] "Images for Thesis.pptx"                            
[11] "My Music"                                          
[12] "My Pictures"                                       
[13] "My Videos"                                         
[14] "R"                                                 
[15] "Sherwin Miller Complaint letter rough draft 2.docx"
[16] "Sherwin Miller Plant collection 1.pptx"            
[17] "Signature for Cultural anthropology syllabus.pdf"  
[18] "Week 2 discussion.docx"                            

| All that hard work is paying off!

  |                                                                              |==================                                                    |  26%
| As we go through this lesson, you should be examining the help page for each
| new function. Check out the help page for list.files with the command
| ?list.files.

> ?list.files
starting httpd help server ... done

| Keep up the great work!

  |                                                                              |====================                                                  |  28%
| One of the most helpful parts of any R help file is the See Also section.
| Read that section for list.files. Some of these functions may be used in
| later portions of this lesson.

...

  |                                                                              |======================                                                |  31%
| Using the args() function on a function name is also a handy way to see what
| arguments a function can take.

...

  |                                                                              |=======================                                               |  33%
| Use the args() function to determine the arguments to list.files().

> args()
Error in args() : argument "name" is missing, with no default
> args()args(list.files)
Error: unexpected symbol in "args()args"
> args(list.files)
function (path = ".", pattern = NULL, all.files = FALSE, 
    full.names = FALSE, recursive = FALSE, ignore.case = FALSE, 
    include.dirs = FALSE, no.. = FALSE) 
NULL

| You are really on a roll!

  |                                                                              |=========================                                             |  36%
| Assign the value of the current working directory to a variable called
| "old.dir".

> old.dir <- getwd()

| That's correct!

  |                                                                              |===========================                                           |  38%
| We will use old.dir at the end of this lesson to move back to the place that
| we started. A lot of query functions like getwd() have the useful property
| that they return the answer to the question as a result of the function.

...

  |                                                                              |=============================                                         |  41%
| Use dir.create() to create a directory in the current working directory
| called "testdir".

> dir.create(testdir)
Error in dir.create(testdir) : object 'testdir' not found
> dir.create()
Error in dir.create() : argument "path" is missing, with no default
> getwd(dir.create(testdir))
Error in getwd(dir.create(testdir)) : 
  unused argument (dir.create(testdir))
> getwd(testdir)
Error in getwd(testdir) : unused argument (testdir)
> getwd(dir.create)
Error in getwd(dir.create) : unused argument (dir.create)
> getwd(dir.create)(testdir)
Error in getwd(dir.create) : unused argument (dir.create)
> getwd(dir.create("testdir")
+ getwd(dir.create("testdir")
Error: unexpected symbol in:
"getwd(dir.create("testdir")
getwd"
> getwd(dir.create("testdir")
+ 
+ getwd(dir.create("testdir")
Error: unexpected symbol in:
"
getwd"
> args(dir.create)
function (path, showWarnings = TRUE, recursive = FALSE, mode = "0777") 
NULL

| One more time. You can do it! Or, type info() for more options.

| Type dir.create("testdir") to create a directory in the current working
| directory called "testdir".

> dir.create("testdir")

| Excellent job!

  |                                                                              |===============================                                       |  44%
| We will do all our work in this new directory and then delete it after we
| are done. This is the R analog to "Take only pictures, leave only
| footprints."

...

  |                                                                              |================================                                      |  46%
| Set your working directory to "testdir" with the setwd() command.

> setwd("testdir")

| Great job!

  |                                                                              |==================================                                    |  49%
| In general, you will want your working directory to be someplace sensible,
| perhaps created for the specific project that you are working on. In fact,
| organizing your work in R packages using RStudio is an excellent option.
| Check out RStudio at http://www.rstudio.com/

...

  |                                                                              |====================================                                  |  51%
| Create a file in your working directory called "mytest.R" using the
| file.create() function.

> file.create("mytest.R")
[1] TRUE

| That's the answer I was looking for.

  |                                                                              |======================================                                |  54%
| This should be the only file in this newly created directory. Let's check
| this by listing all the files in the current directory.

> list.files("testdir")
character(0)

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| list.files() shows that the directory only contains mytest.R.

> list.files("mytest.R")
character(0)

| Not quite right, but keep trying. Or, type info() for more options.

| list.files() shows that the directory only contains mytest.R.

> list.files(mytest.R)
Error in list.files(mytest.R) : object 'mytest.R' not found
> list.files()
[1] "mytest.R"

| Great job!

  |                                                                              |=======================================                               |  56%
| Check to see if "mytest.R" exists in the working directory using the
| file.exists() function.

> list.files("mytest.R")
character(0)

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Use file.exists("mytest.R") to check that a file exists.

> file.exists("mytest.R")
[1] TRUE

| You're the best!

  |                                                                              |=========================================                             |  59%
| These sorts of functions are excessive for interactive use. But, if you are
| running a program that loops through a series of files and does some
| processing on each one, you will want to check to see that each exists
| before you try to process it.

...

  |                                                                              |===========================================                           |  62%
| Access information about the file "mytest.R" by using file.info().

> file.info("mytest.R")
         size isdir mode               mtime               ctime
mytest.R    0 FALSE  666 2020-01-18 21:08:23 2020-01-18 21:08:23
                       atime exe
mytest.R 2020-01-18 21:08:23  no

| You're the best!

  |                                                                              |=============================================                         |  64%
| You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab
| specific items.

...

  |                                                                              |===============================================                       |  67%
| Change the name of the file "mytest.R" to "mytest2.R" by using
| file.rename().

> file.rename("mytest.R")
Error in file.rename("mytest.R") : 
  argument "to" is missing, with no default
> file.rename("mytest.R" to "mytest2.R")
Error: unexpected symbol in "file.rename("mytest.R" to"
> file.rename("mytest.R" "to" "mytest2.R")
Error: unexpected string constant in "file.rename("mytest.R" "to""
> file.rename("mytest.R" args("mytest2.R"))
Error: unexpected symbol in "file.rename("mytest.R" args"
> file.rename("mytest.R") to "mytest2.R"
Error: unexpected symbol in "file.rename("mytest.R") to"
> file.rename( from = "mytest.R", to = "mytest2.R")
[1] TRUE

| That's a job well done!

  |                                                                              |================================================                      |  69%
| Your operating system will provide simpler tools for these sorts of tasks,
| but having the ability to manipulate files programatically is useful. You
| might now try to delete mytest.R using file.remove('mytest.R'), but that
| won't work since mytest.R no longer exists. You have already renamed it.

...

  |                                                                              |==================================================                    |  72%
| Make a copy of "mytest2.R" called "mytest3.R" using file.copy().

> file.copy( from = "mytest2.R", to = "mytest3.R")
[1] TRUE

| Excellent work!

  |                                                                              |====================================================                  |  74%
| You now have two files in the current directory. That may not seem very
| interesting. But what if you were working with dozens, or millions, of
| individual files? In that case, being able to programatically act on many
| files would be absolutely necessary. Don't forget that you can, temporarily,
| leave the lesson by typing play() and then return by typing nxt().

...

  |                                                                              |======================================================                |  77%
| Provide the relative path to the file "mytest3.R" by using file.path().

> file.path ("mytest3.R")
[1] "mytest3.R"

| That's correct!

  |                                                                              |========================================================              |  79%
| You can use file.path to construct file and directory paths that are
| independent of the operating system your R code is running on. Pass
| 'folder1' and 'folder2' as arguments to file.path to make a
| platform-independent pathname.

> args(from = folder1, folder 2, to = file.path)
Error: unexpected numeric constant in "args(from = folder1, folder 2"
> args(from = folder1 and folder 2, to = file.path)
Error: unexpected symbol in "args(from = folder1 and"
> args(from = 'folder1' 'folder 2', to = file.path)
Error: unexpected string constant in "args(from = 'folder1' 'folder 2'"
> args(from = folder1 folder 2, to = file.path)
Error: unexpected symbol in "args(from = folder1 folder"
> args(folder1,folder2)
Error in args(folder1, folder2) : unused argument (folder2)
> args(folder1,)args(folder2)
Error: unexpected symbol in "args(folder1,)args"
> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> args(folder1)
Error in args(folder1) : object 'folder1' not found
> args(folder1)
Error in args(folder1) : object 'folder1' not found
> args(folder1)
Error in args(folder1) : object 'folder1' not found
> file.path("folder1", "folder2")
[1] "folder1/folder2"

| That's a job well done!

  |                                                                              |=========================================================             |  82%
| Take a look at the documentation for dir.create by entering ?dir.create .
| Notice the 'recursive' argument. In order to create nested directories,
| 'recursive' must be set to TRUE.

> ?dir.create

| All that practice is paying off!

  |                                                                              |===========================================================           |  85%
| Create a directory in the current working directory called "testdir2" and a
| subdirectory for it called "testdir3", all in one command by using
| dir.create() and file.path().

> dir.create(file.path("testdir2", "testdir3")
+ 
+ dir.create(file.path("testdir2", "testdir3")
Error: unexpected symbol in:
"
dir.create"
> dir.create(file.path("testdir2", "testdir3") recursive = TRUE
Error: unexpected symbol in "dir.create(file.path("testdir2", "testdir3") recursive"
> dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
+ 
+ dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
Error: unexpected symbol in:
"
dir.create"
> dir.create(file.path(testdir2", "testdir3"))
Error: unexpected string constant in "dir.create(file.path(testdir2", ""
> dir.create(file.path("testdir2", "testdir3"))
Warning message:
In dir.create(file.path("testdir2", "testdir3")) :
  cannot create dir 'testdir2\testdir3', reason 'No such file or directory'

| That's not the answer I was looking for, but try again. Or, type info() for
| more options.

| dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) will do the
| trick. If you forgot the recursive argument, the command may have appeared
| to work, but it didn't create the nested directory.

> dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
+ dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
Error: unexpected symbol in:
"dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
dir.create"
> dir.create(file.path("testdir2", "testdir3")), recursive = TRUE
Error: unexpected ',' in "dir.create(file.path("testdir2", "testdir3")),"
> dir.create(file.path('testdir2', 'testdir3')), recursive = TRUE
Error: unexpected ',' in "dir.create(file.path('testdir2', 'testdir3')),"
> dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
+ 
+ dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
Error: unexpected symbol in:
"
dir.create"
> dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
+ dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
Error: unexpected symbol in:
"dir.create(file.path("testdir2", "testdir3") , recursive = TRUE
dir.create"
> dir.create(file.path("testdir2" , "testdir3") , recursive = TRUE
+ dir.create(file.path("testdir2" , "testdir3") , recursive = TRUE
Error: unexpected symbol in:
"dir.create(file.path("testdir2" , "testdir3") , recursive = TRUE
dir.create"
> "dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
Error: unexpected symbol in ""dir.create(file.path("testdir2"
> dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)

| Perseverance, that's the answer.

  |                                                                              |=============================================================         |  87%
| Go back to your original working directory using setwd(). (Recall that we
| created the variable old.dir with the full path for the orginal working
| directory at the start of these questions.)

> setwd(old.dir)

| You got it!

  |                                                                              |===============================================================       |  90%
| It is often helpful to save the settings that you had before you began an
| analysis and then go back to them at the end. This trick is often used
| within functions; you save, say, the par() settings that you started with,
| mess around a bunch, and then set them back to the original values at the
| end. This isn't the same as what we have done here, but it seems similar
| enough to mention.

...

  |                                                                              |=================================================================     |  92%
| After you finish this lesson delete the 'testdir' directory that you just
| left (and everything in it)

...

  |                                                                              |==================================================================    |  95%
| Take nothing but results. Leave nothing but assumptions. That sounds like
| 'Take nothing but pictures. Leave nothing but footprints.' But it makes no
| sense! Surely our readers can come up with a better motto . . .

...

  |                                                                              |====================================================================  |  97%
| In this lesson, you learned how to examine your R workspace and work with
| the file system of your machine from within R. Thanks for playing!

...

  |                                                                              |======================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 2

| You nailed it! Good job!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 3

  |                                                                             |                                                                     |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

...

  |                                                                             |===                                                                  |   4%
| The simplest way to create a sequence of numbers in R is by using the `:`
| operator. Type 1:20 to see how it works.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You are doing so well!

  |                                                                             |======                                                               |   9%
| That gave us every integer between (and including) 1 and 20. We could also
| use it to create a sequence of real numbers. For example, try pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| You're the best!

  |                                                                             |=========                                                            |  13%
| The result is a vector of real numbers starting with pi (3.142...) and
| increasing in increments of 1. The upper limit of 10 is never reached, since
| the next number in our sequence would be greater than 10.

...

  |                                                                             |============                                                         |  17%
| What happens if we do 15:1? Give it a try to find out.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| Nice work!

  |                                                                             |===============                                                      |  22%
| It counted backwards in increments of 1! It's unlikely we'd want this
| behavior, but nonetheless it's good to know how it could happen.

...

  |                                                                             |==================                                                   |  26%
| Remember that if you have questions about a particular R function, you can
| access its documentation with a question mark followed by the function name:
| ?function_name_here. However, in the case of an operator like the colon used
| above, you must enclose the symbol in backticks like this: ?`:`. (NOTE: The
| backtick (`) key is generally located in the top left corner of a keyboard,
| above the Tab key. If you don't have a backtick key, you can use regular
| quotes.)

...

  |                                                                             |=====================                                                |  30%
| Pull up the documentation for `:` now.

> ?:
Error: unexpected ':' in "?:"
> ?":"

| You got it right!

  |                                                                             |========================                                             |  35%
| Often, we'll desire more control over a sequence we're creating than what
| the `:` operator gives us. The seq() function serves this purpose.

...

  |                                                                             |===========================                                          |  39%
| The most basic use of seq() does exactly the same thing as the `:` operator.
| Try seq(1, 20) to see this.

> seq(1,20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Nice work!

  |                                                                             |==============================                                       |  43%
| This gives us the same output as 1:20. However, let's say that instead we
| want a vector of numbers ranging from 0 to 10, incremented by 0.5. seq(0,
| 10, by=0.5) does just that. Try it out.

> seq(0,10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0
[16]  7.5  8.0  8.5  9.0  9.5 10.0

| You are really on a roll!

  |                                                                             |=================================                                    |  48%
| Or maybe we don't care what the increment is and we just want a sequence of
| 30 numbers between 5 and 10. seq(5, 10, length=30) does the trick. Give it a
| shot now and store the result in a new variable called my_seq.

> my_seq <- seq(5, 10, length=30)

| That's a job well done!

  |                                                                             |====================================                                 |  52%
| To confirm that my_seq has length 30, we can use the length() function. Try
| it now.

> length()
Error in length() : 0 arguments passed to 'length' which requires 1
> length(30)
[1] 1

| Almost! Try again. Or, type info() for more options.

| Use length(my_seq) to view the length of the my_seq variable.

> length(my_seq)
[1] 30

| All that hard work is paying off!

  |                                                                             |=======================================                              |  57%
| Let's pretend we don't know the length of my_seq, but we want to generate a
| sequence of integers from 1 to N, where N represents the length of the
| my_seq vector. In other words, we want a new vector (1, 2, 3, ...) that is
| the same length as my_seq.

...

  |                                                                             |==========================================                           |  61%
| There are several ways we could do this. One possibility is to combine the
| `:` operator and the length() function like this: 1:length(my_seq). Give
| that a try.

> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| That's the answer I was looking for.

  |                                                                             |=============================================                        |  65%
| Another option is to use seq(along.with = my_seq). Give that a try.

> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| You are really on a roll!

  |                                                                             |================================================                     |  70%
| However, as is the case with many common tasks, R has a separate built-in
| function for this purpose called seq_along(). Type seq_along(my_seq) to see
| it in action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| You are really on a roll!

  |                                                                             |===================================================                  |  74%
| There are often several approaches to solving the same problem, particularly
| in R. Simple approaches that involve less typing are generally best. It's
| also important for your code to be readable, so that you and others can
| figure out what's going on without too much hassle.

...

  |                                                                             |======================================================               |  78%
| If R has a built-in function for a particular task, it's likely that
| function is highly optimized for that purpose and is your best option. As
| you become a more advanced R programmer, you'll design your own functions to
| perform tasks when there are no better options. We'll explore writing your
| own functions in future lessons.

...

  |                                                                             |=========================================================            |  83%
| One more function related to creating sequences of numbers is rep(), which
| stands for 'replicate'. Let's look at a few uses.

...

  |                                                                             |============================================================         |  87%
| If we're interested in creating a vector that contains 40 zeros, we can use
| rep(0, times = 40). Try it out.

> rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[38] 0 0 0

| All that hard work is paying off!

  |                                                                             |===============================================================      |  91%
| If instead we want our vector to contain 10 repetitions of the vector (0, 1,
| 2), we can do rep(c(0, 1, 2), times = 10). Go ahead.

> rep(c(0, 1, 2), times = 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| Keep working like that and you'll get there!

  |                                                                             |==================================================================   |  96%
| Finally, let's say that rather than repeating the vector (0, 1, 2) over and
| over again, we want our vector to contain 10 zeros, then 10 ones, then 10
| twos. We can do this with the `each` argument. Try rep(c(0, 1, 2), each =
| 10).

> rep(c(0, 1, 2) each = 10)
Error: unexpected symbol in "rep(c(0, 1, 2) each"
> rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| Excellent work!

  |                                                                             |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 1

| Perseverance, that's the answer.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 0

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 2

| OK. I'm opening the swirl courses web page in your browser.

| Leaving swirl now. Type swirl() to resume.

> 
