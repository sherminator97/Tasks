
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library (swirl)

| Hi! I see that you have some variables saved in your workspace. To keep
| things running smoothly, I recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type
| rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swirl ()

| Welcome to swirl! Please sign in. If you've been here before, use the same
| name as you did then. If you are new, call yourself something unique.

What shall I call you? Sherwin Miller

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 9

  |                                                                              |                                                                      |   0%

| Functions are one of the fundamental building blocks of the R language. They
| are small pieces of reusable code that can be treated like any other R
| object.

...

  |                                                                              |=                                                                     |   2%
| If you've worked through any other part of this course, you've probably used
| some functions already. Functions are usually characterized by the name of
| the function followed by parentheses.

...

  |                                                                              |===                                                                   |   4%
| Let's try using a few basic functions just for fun. The Sys.Date() function
| returns a string representing today's date. Type Sys.Date() below and see
| what happens.

> Sys.Date()
[1] "2020-01-19"

| Nice work!

  |                                                                              |====                                                                  |   6%
| Most functions in R return a value. Functions like Sys.Date() return a value
| based on your computer's environment, while other functions manipulate input
| data in order to compute a return value.

...

  |                                                                              |======                                                                |   8%
| The mean() function takes a vector of numbers as input, and returns the
| average of all of the numbers in the input vector. Inputs to functions are
| often called arguments. Providing arguments to a function is also sometimes
| called passing arguments to that function. Arguments you want to pass to a
| function go inside the function's parentheses. Try passing the argument c(2,
| 4, 5) to the mean() function.

> mean(c(2, 4, 5))
[1] 3.666667

| You are quite good my friend!

  |                                                                              |=======                                                               |  10%
| Functions usually take arguments which are variables that the function
| operates on. For example, the mean() function takes a vector as an argument,
| like in the case of mean(c(2,6,8)). The mean() function then adds up all of
| the numbers in the vector and divides that sum by the length of the vector.

...

  |                                                                              |=========                                                             |  12%
| In the following question you will be asked to modify a script that will
| appear as soon as you move on from this question. When you have finished
| modifying the script, save your changes to the script and type submit() and
| the script will be evaluated. There will be some comments in the script that
| opens up, so be sure to read them!

...

  |                                                                              |==========                                                            |  14%
| The last R expression to be evaluated in a function will become the return
| value of that function. We want this function to take one argument, x, and
| return x without modifying it. Delete the pound sign so that x is returned
| without any modification. Make sure to save your script before you type
| submit().

> submit()

| Sourcing your script...


| One more time. You can do it!

| Make sure to delete the pound sign so the last expression in the function is just x.

> submit()

| Sourcing your script...


| That's not exactly what I'm looking for. Try again.

| Make sure to delete the pound sign so the last expression in the function is just x.

> submit()

| Sourcing your script...


| Try again. Getting it right on the first try is boring anyway!

| Make sure to delete the pound sign so the last expression in the function is
| just x.

> submit()

| Sourcing your script...


| You got it!

  |                                                                              |===========                                                           |  16%
| Now that you've created your first function let's test it! Type:
| boring_function('My first function!'). If your function works, it should just
| return the string: 'My first function!'

> boring_function("My first function!")
[1] "My first function!"

| You got it!

  |                                                                              |=============                                                         |  18%
| Congratulations on writing your first function. By writing functions, you can
| gain serious insight into how R works. As John Chambers, the creator of R
| once said:
| 
| To understand computations in R, two slogans are helpful: 1. Everything that
| exists is an object. 2. Everything that happens is a function call.

...

  |                                                                              |==============                                                        |  20%
| If you want to see the source code for any function, just type the function
| name without any arguments or parentheses. Let's try this out with the
| function you just created. Type: boring_function to view its source code.

> boring_function
function(x) {
  x
}
<bytecode: 0x000000000cf60ee8>

| Your dedication is inspiring!

  |                                                                              |================                                                      |  22%
| Time to make a more useful function! We're going to replicate the
| functionality of the mean() function by creating a function called:
| my_mean(). Remember that to calculate the average of all of the numbers in a
| vector you find the sum of all the numbers in the vector, and then divide
| that sum by the number of numbers in the vector.

...

  |                                                                              |=================                                                     |  24%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You are doing so well!

  |                                                                              |===================                                                   |  27%
| Now test out your my_mean() function by finding the mean of the vector c(4,
| 5, 10).

> my_mean(c(4, 5, 10))
[1] 6.333333

| You got it right!

  |                                                                              |====================                                                  |  29%
| Next, let's try writing a function with default arguments. You can set
| default values for a function's arguments, and this can be useful if you
| think someone who uses your function will set a certain argument to the same
| value most of the time.

...

  |                                                                              |=====================                                                 |  31%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You almost had it, but not quite. Try again.

| Remember to set the appropriate default values!

> submit()

| Sourcing your script...

Error in source(e$script_temp_path, encoding = "UTF-8") : 
  C:\Users\Sherm\AppData\Local\Temp\RtmpIxqdpp/remainder.R:36:1: unexpected '}'
35:   # Remember: the last expression evaluated will be returned! 
36: }
    ^

| You're close...I can feel it! Try it again.

| Remember to set the appropriate default values!

> submit()

| Sourcing your script...

Error in source(e$script_temp_path, encoding = "UTF-8") : 
  C:\Users\Sherm\AppData\Local\Temp\RtmpIxqdpp/remainder.R:36:1: unexpected '}'
35:   # Remember: the last expression evaluated will be returned! 
36: }
    ^

| Not quite, but you're learning! Try again.

| Remember to set the appropriate default values!

> submit()

| Sourcing your script...

Error in source(e$script_temp_path, encoding = "UTF-8") : 
  C:\Users\Sherm\AppData\Local\Temp\RtmpIxqdpp/remainder.R:37:1: unexpected '}'
36: remainder(num, divisor = 2)
37: }
    ^

| You're close...I can feel it! Try it again.

| Remember to set the appropriate default values!

> submit()

| Sourcing your script...


| Almost! Try again.

| Remember to set the appropriate default values!

> submit()

| Sourcing your script...

Error in source(e$script_temp_path, encoding = "UTF-8") : 
  C:\Users\Sherm\AppData\Local\Temp\RtmpIxqdpp/remainder.R:33:27: unexpected '/'
32: 
33: remainder <- function(num /
                              ^

| That's not the answer I was looking for, but try again.

| Remember to set the appropriate default values!

> submit()

| Sourcing your script...


| Perseverance, that's the answer.

  |                                                                              |=======================                                               |  33%
| Let's do some testing of the remainder function. Run remainder(5) and see
| what happens.

> remainder(5)
[1] 1

| Excellent work!

  |                                                                              |========================                                              |  35%
| Let's take a moment to examine what just happened. You provided one argument
| to the function, and R matched that argument to 'num' since 'num' is the
| first argument. The default value for 'divisor' is 2, so the function used
| the default value you provided.

...

  |                                                                              |==========================                                            |  37%
| Now let's test the remainder function by providing two arguments. Type:
| remainder(11, 5) and let's see what happens.

> remainder(11, 5)
[1] 1

| You got it!

  |                                                                              |===========================                                           |  39%
| Once again, the arguments have been matched appropriately.

...

  |                                                                              |=============================                                         |  41%
| You can also explicitly specify arguments in a function. When you explicitly
| designate argument values by name, the ordering of the arguments becomes
| unimportant. You can try this out by typing: remainder(divisor = 11, num =
| 5).

> remainder(divisor = 11, num = 5)
[1] 5

| Great job!

  |                                                                              |==============================                                        |  43%
| As you can see, there is a significant difference between remainder(11, 5)
| and remainder(divisor = 11, num = 5)!

...

  |                                                                              |===============================                                       |  45%
| R can also partially match arguments. Try typing remainder(4, div = 2) to see
| this feature in action.

> remainder(4, div = 2)
[1] 0

| You are amazing!

  |                                                                              |=================================                                     |  47%
| A word of warning: in general you want to make your code as easy to
| understand as possible. Switching around the orders of arguments by
| specifying their names or only using partial argument names can be confusing,
| so use these features with caution!

...

  |                                                                              |==================================                                    |  49%
| With all of this talk about arguments, you may be wondering if there is a way
| you can see a function's arguments (besides looking at the documentation).
| Thankfully, you can use the args() function! Type: args(remainder) to examine
| the arguments for the remainder function.

> args(remainder)
function (num, divisor = 2) 
NULL

| That's correct!

  |                                                                              |====================================                                  |  51%
| You may not realize it but I just tricked you into doing something pretty
| interesting! args() is a function, remainder() is a function, yet remainder
| was an argument for args(). Yes it's true: you can pass functions as
| arguments! This is a very powerful concept. Let's write a script to see how
| it works.

...

  |                                                                              |=====================================                                 |  53%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You're the best!

  |                                                                              |=======================================                               |  55%
| Let's take your new evaluate() function for a spin! Use evaluate to find the
| standard deviation of the vector c(1.4, 3.6, 7.9, 8.8).

> evaluate( c(1.4, 3.6, 7.9, 8.8))
Error in func(dat) : could not find function "func"
> evaluate(c(1.4, 3.6, 7.9, 8.8))
Error in func(dat) : could not find function "func"
>  
> evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
[1] 3.514138

| All that hard work is paying off!

  |                                                                              |========================================                              |  57%
| The idea of passing functions as arguments to other functions is an important
| and fundamental concept in programming.

...

  |                                                                              |=========================================                             |  59%
| You may be surprised to learn that you can pass a function as an argument
| without first defining the passed function. Functions that are not named are
| appropriately known as anonymous functions.

...

  |                                                                              |===========================================                           |  61%
| Let's use the evaluate function to explore how anonymous functions work. For
| the first argument of the evaluate function we're going to write a tiny
| function that fits on one line. In the second argument we'll pass some data
| to the tiny anonymous function in the first argument.

...

  |                                                                              |============================================                          |  63%
| Type the following command and then we'll discuss how it works:
| evaluate(function(x){x+1}, 6)

> evaluate(function(x){x+1}, 6)
[1] 7

| You are really on a roll!

  |                                                                              |==============================================                        |  65%
| The first argument is a tiny anonymous function that takes one argument `x`
| and returns `x+1`. We passed the number 6 into this function so the entire
| expression evaluates to 7.

...

  |                                                                              |===============================================                       |  67%
| Try using evaluate() along with an anonymous function to return the first
| element of the vector c(8, 4, 0). Your anonymous function should only take
| one argument which should be a variable `x`.

> evaluate(function(x){x+1}, c(8, 4, 0))
[1] 9 5 1

| Not quite, but you're learning! Try again. Or, type info() for more options.

| You may need to recall how to index vector elements. Remember that your
| anonymous function should only have one argument, and that argument should be
| named `x`.

> evaluate(function(x){x+1},c(8, 4, 0))
[1] 9 5 1

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| You may need to recall how to index vector elements. Remember that your
| anonymous function should only have one argument, and that argument should be
| named `x`.

> evaluate(function(x){x+[1]},c(8, 4, 0))
Error: unexpected '[' in "evaluate(function(x){x+["
> evaluate(function(x){x[1]},c(8, 4, 0))
[1] 8

| You're the best!

  |                                                                              |=================================================                     |  69%
| Now try using evaluate() along with an anonymous function to return the last
| element of the vector c(8, 4, 0). Your anonymous function should only take
| one argument which should be a variable `x`.

> valuate(function(x){x[-1]}, c(8, 4, 0))
Error in valuate(function(x) { : could not find function "valuate"
> evaluate(function(x){x[-1]}, c(8, 4, 0))
[1] 4 0

| All that practice is paying off!

  |                                                                              |==================================================                    |  71%
| For the rest of the course we're going to use the paste() function
| frequently. Type ?paste so we can take a look at the documentation for the
| paste function.

> ?paste
starting httpd help server ... done

| Nice work!

  |                                                                              |===================================================                   |  73%
| As you can see the first argument of paste() is `...` which is referred to as
| an ellipsis or simply dot-dot-dot. The ellipsis allows an indefinite number
| of arguments to be passed into a function. In the case of paste() any number
| of strings can be passed as arguments and paste() will return all of the
| strings combined into one string.

...

  |                                                                              |=====================================================                 |  76%
| Just to see how paste() works, type paste("Programming", "is", "fun!")

> paste("Programming", "is", "fun!")
[1] "Programming is fun!"

| Perseverance, that's the answer.

  |                                                                              |======================================================                |  78%
| Time to write our own modified version of paste().

...

  |                                                                              |========================================================              |  80%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...

Error in source(e$script_temp_path, encoding = "UTF-8") : 
  C:\Users\Sherm\AppData\Local\Temp\RtmpIxqdpp/telegram.R:33:22: unexpected string constant
32: 
33: telegram <- function("Good"
                         ^

| Not quite, but you're learning! Try again.

| Remember that arguments can come after ...

> submit()

| Sourcing your script...

Error in source(e$script_temp_path, encoding = "UTF-8") : 
  C:\Users\Sherm\AppData\Local\Temp\RtmpIxqdpp/telegram.R:33:63: unexpected '{'
32: 
33: telegram <- function(...)paste("START", ..., "STOP", sep = ""){
                                                                  ^

| Give it another try.

| Remember that arguments can come after ...

> submit()

| Sourcing your script...

Error in source(e$script_temp_path, encoding = "UTF-8") : 
  C:\Users\Sherm\AppData\Local\Temp\RtmpIxqdpp/telegram.R:33:64: unexpected '{'
32: 
33: telegram <- function(...)paste("START", ..., "STOP", sep = " "){
                                                                   ^

| Not quite right, but keep trying.

| Remember that arguments can come after ...

> submit()

| Sourcing your script...


| Nice work!

  |                                                                              |=========================================================             |  82%
| Now let's test out your telegram function. Use your new telegram function
| passing in whatever arguments you wish!

> telegram(c( "Hello", "good", "morning", "!"))
[1] "START Hello STOP"   "START good STOP"    "START morning STOP"
[4] "START ! STOP"      

| Keep working like that and you'll get there!

  |                                                                              |===========================================================           |  84%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| Excellent work!

  |                                                                              |============================================================          |  86%
| Time to use your mad_libs function. Make sure to name the place, adjective,
| and noun arguments in order for your function to work.

> mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
+ mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
Error: unexpected symbol in:
"mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
mad_libs"
> mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
+ mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
Error: unexpected symbol in:
"mad_libs(place = "America", adjective = "gorgeous", noun = "flag"
mad_libs"
> mad_libs(place = "America", adjective = "gorgeous", noun = "flag") 
[1] "News from America today where gorgeous students took to the streets in protest of the new flag being installed on campus."

| That's the answer I was looking for.

  |                                                                              |=============================================================         |  88%
| We're coming to the end of this lesson, but there's still one more idea you
| should be made aware of.

...

  |                                                                              |===============================================================       |  90%
| You're familiar with adding, subtracting, multiplying, and dividing numbers
| in R. To do this you use the +, -, *, and / symbols. These symbols are called
| binary operators because they take two inputs, an input from the left and an
| input from the right.

...

  |                                                                              |================================================================      |  92%
| In R you can define your own binary operators. In the next script I'll show
| you how.

...

  |                                                                              |==================================================================    |  94%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You nailed it! Good job!

  |                                                                              |===================================================================   |  96%
| You made your own binary operator! Let's test it out. Paste together the
| strings: 'I', 'love', 'R!' using your new binary operator.

> "I" %p% "love" %p% "R!"
[1] "I love R!"

| You are doing so well!

  |                                                                              |===================================================================== |  98%
| We've come to the end of our lesson! Go out there and write some great
| functions!

...

  |                                                                              |======================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 2

| You are really on a roll!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 15

  |                                                                              |                                                                      |   0%

| One of the greatest strengths of R, relative to other programming languages,
| is the ease with which we can create publication-quality graphics. In this
| lesson, you'll learn about base graphics in R.

...

  |                                                                              |==                                                                    |   2%
| We do not cover the more advanced portions of graphics in R in this lesson.
| These include lattice, ggplot2 and ggvis.

...

  |                                                                              |===                                                                   |   4%
| There is a school of thought that this approach is backwards, that we should
| teach ggplot2 first. See
| http://varianceexplained.org/r/teach_ggplot2_to_beginners/ for an outline of
| this view.

...

  |                                                                              |=====                                                                 |   7%
| Load the included data frame cars with data(cars).

> data(cars)

| You are quite good my friend!

  |                                                                              |======                                                                |   9%
| To fix ideas, we will work with simple data frames. Our main goal is to
| introduce various plotting functions and their arguments. All the output
| would look more interesting with larger, more complex data sets.

...

  |                                                                              |========                                                              |  11%
| Pull up the help page for cars.

> ?cars

| You are quite good my friend!

  |                                                                              |=========                                                             |  13%
| As you can see in the help page, the cars data set has only two variables:
| speed and stopping distance. Note that the data is from the 1920s.

...

  |                                                                              |===========                                                           |  15%
| Run head() on the cars data.

> head(cars)
  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10

| Perseverance, that's the answer.

  |                                                                              |============                                                          |  17%
| Before plotting, it is always a good idea to get a sense of the data. Key R
| commands for doing so include, dim(), names(), head(), tail() and summary().

...

  |                                                                              |==============                                                        |  20%
| Run the plot() command on the cars data frame.

> plot(cars)

| Excellent job!

  |                                                                              |===============                                                       |  22%
| As always, R tries very hard to give you something sensible given the
| information that you have provided to it. First, R notes that the data frame
| you have given it has just two columns, so it assumes that you want to plot
| one column versus the other.

...

  |                                                                              |=================                                                     |  24%
| Second, since we do not provide labels for either axis, R uses the names of
| the columns. Third, it creates axis tick marks at nice round numbers and
| labels them accordingly. Fourth, it uses the other defaults supplied in
| plot().

...

  |                                                                              |==================                                                    |  26%
| We will now spend some time exploring plot, but many of the topics covered
| here will apply to most other R graphics functions. Note that 'plot' is short
| for scatterplot.

...

  |                                                                              |====================                                                  |  28%
| Look up the help page for plot().

> ?plot

| Keep working like that and you'll get there!

  |                                                                              |=====================                                                 |  30%
| The help page for plot() highlights the different arguments that the function
| can take. The two most important are x and y, the variables that will be
| plotted. For the next set of questions, include the argument names in your
| answers. That is, do not type plot(cars$speed, cars$dist), although that will
| work. Instead, use plot(x = cars$speed, y = cars$dist).

...

  |                                                                              |=======================                                               |  33%
| Use plot() command to show speed on the x-axis and dist on the y-axis from
| the cars data frame. Use the form of the plot command in which vectors are
| explicitly passed in as arguments for x and y.

> plot(x = cars$speed, y = cars$dist)

| Excellent job!

  |                                                                              |========================                                              |  35%
| Note that this produces a slightly different answer than plot(cars). In this
| case, R is not sure what you want to use as the labels on the axes, so it
| just uses the arguments which you pass in, data frame name and dollar signs
| included.

...

  |                                                                              |==========================                                            |  37%
| Note that there are other ways to call the plot command, i.e., using the
| "formula" interface. For example, we get a similar plot to the above with
| plot(dist ~ speed, cars). However, we will wait till later in the lesson
| before using the formula interface.

...

  |                                                                              |===========================                                           |  39%
| Use plot() command to show dist on the x-axis and speed on the y-axis from
| the cars data frame. This is the opposite of what we did above.

> plot()
Error in xy.coords(x, y, xlabel, ylabel, log) : 
  argument "x" is missing, with no default
> plot(x = speed, y = cars)
Error in plot(x = speed, y = cars) : object 'speed' not found
> plot(x = cars$dist, y = cars$speed)

| Your dedication is inspiring!

  |                                                                              |=============================                                         |  41%
| It probably makes more sense for speed to go on the x-axis since stopping
| distance is a function of speed more than the other way around. So, for the
| rest of the questions in this portion of the lesson, always assign the
| arguments accordingly.

...

  |                                                                              |==============================                                        |  43%
| In fact, you can assume that the answers to the next few questions are all of
| the form plot(x = cars$speed, y = cars$dist, ...) but with various arguments
| used in place of the ...

...

  |                                                                              |================================                                      |  46%
| Recreate the plot with the label of the x-axis set to "Speed".

> plot(x = cars$speed, y = cars$dist, xlab = "Speed")

| You are doing so well!

  |                                                                              |=================================                                     |  48%
| Recreate the plot with the label of the y-axis set to "Stopping Distance".

> plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")

| All that hard work is paying off!

  |                                                                              |===================================                                   |  50%
| Recreate the plot with "Speed" and "Stopping Distance" as axis labels.

> plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")

| You are doing so well!

  |                                                                              |=====================================                                 |  52%
| The reason that plots(cars) worked at the beginning of the lesson was that R
| was smart enough to know that the first element (i.e., the first column) in
| cars should be assigned to the x argument and the second element to the y
| argument. To save on typing, the next set of answers will all be of the form,
| plot(cars, ...) with various arguments added.

...

  |                                                                              |======================================                                |  54%
| For each question, we will only want one additional argument at a time. Of
| course, you can pass in more than one argument when doing a real project.

...

  |                                                                              |========================================                              |  57%
| Plot cars with a main title of "My Plot". Note that the argument for the main
| title is "main" not "title".

> plot(cars, sub = "My Plot Subtitle")

| You almost had it, but not quite. Try again. Or, type info() for more
| options.

| Type plot(cars, main = "My Plot") to create the plot.

> plot(cars, sub = "My Plot Subtitle")

| Give it another try. Or, type info() for more options.

| Type plot(cars, main = "My Plot") to create the plot.

> plot(cars, main = "My Plot")

| You got it!

  |                                                                              |=========================================                             |  59%
| Plot cars with a sub title of "My Plot Subtitle".

> plot(cars, sub = "My Plot Subtitle")

| You are really on a roll!

  |                                                                              |===========================================                           |  61%
| The plot help page (?plot) only covers a small number of the many arguments
| that can be passed in to plot() and to other graphical functions. To begin to
| explore the many other options, look at ?par. Let's look at some of the more
| commonly used ones. Continue using plot(cars, ...) as the base answer to
| these questions.

...

  |                                                                              |============================================                          |  63%
| Plot cars so that the plotted points are colored red. (Use col = 2 to achieve
| this effect.)

> plot(cars, col = 2)

| Excellent work!

  |                                                                              |==============================================                        |  65%
| Plot cars while limiting the x-axis to 10 through 15.  (Use xlim = c(10, 15)
| to achieve this effect.)

> plot(cars, xlim = c(10, 15))

| You're the best!

  |                                                                              |===============================================                       |  67%
| You can also change the shape of the symbols in the plot. The help page for
| points (?points) provides the details.

...

  |                                                                              |=================================================                     |  70%
| Plot cars using triangles.  (Use pch = 2 to achieve this effect.)

> plot(cars, pch = 2)

| You got it!

  |                                                                              |==================================================                    |  72%
| Arguments like "col" and "pch" may not seem very intuitive. And that is
| because they aren't! So, many/most people use more modern packages, like
| ggplot2, for creating their graphics in R.

...

  |                                                                              |====================================================                  |  74%
| It is, however, useful to have an introduction to base graphics because many
| of the idioms in lattice and ggplot2 are modeled on them.

...

  |                                                                              |=====================================================                 |  76%
| Let's now look at some other functions in base graphics that may be useful,
| starting with boxplots.

...

  |                                                                              |=======================================================               |  78%
| Load the mtcars data frame.

> data(mtcars)

| Great job!

  |                                                                              |========================================================              |  80%
| Anytime that you load up a new data frame, you should explore it before using
| it. In the middle of a swirl lesson, just type play(). This temporarily
| suspends the lesson (without losing the work you have already done) and
| allows you to issue commands like dim(mtcars) and head(mtcars). Once you are
| done examining the data, just type nxt() and the lesson will pick up where it
| left off.

...

  |                                                                              |==========================================================            |  83%
| Look up the help page for boxplot().

> ?boxplot

| You are quite good my friend!

  |                                                                              |===========================================================           |  85%
| Instead of adding data columns directly as input arguments, as we did with
| plot(), it is often handy to pass in the entire data frame. This is what the
| "data" argument in boxplot() allows.

...

  |                                                                              |=============================================================         |  87%
| boxplot(), like many R functions, also takes a "formula" argument, generally
| an expression with a tilde ("~") which indicates the relationship between the
| input variables. This allows you to enter something like mpg ~ cyl to plot
| the relationship between cyl (number of cylinders) on the x-axis and mpg
| (miles per gallon) on the y-axis.

...

  |                                                                              |==============================================================        |  89%
| Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box
| plot.

> boxplot(mpg ~ cyl, data = mtcars)

| That's correct!

  |                                                                              |================================================================      |  91%
| The plot shows that mpg is much lower for cars with more cylinders. Note that
| we can use the same set of arguments that we explored with plot() above to
| add axis labels, titles and so on.

...

  |                                                                              |=================================================================     |  93%
| When looking at a single variable, histograms are a useful tool. hist() is
| the associated R function. Like plot(), hist() is best used by just passing
| in a single vector.

...

  |                                                                              |===================================================================   |  96%
| Use hist() with the vector mtcars$mpg to create a histogram.

> hist(mtcars$mpg)

| You got it right!

  |                                                                              |====================================================================  |  98%
| In this lesson, you learned how to work with base graphics in R. The best
| place to go from here is to study the ggplot2 package. If you want to explore
| other elements of base graphics, then this web page
| (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful
| overview.

...

  |                                                                              |======================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 1

| Nice work!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 
